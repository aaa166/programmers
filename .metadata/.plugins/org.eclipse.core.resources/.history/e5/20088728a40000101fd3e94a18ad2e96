package baekjoon;

import java.io.*;

public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		String read ;
		
		read =  br.readLine();
		int n = Integer.parseInt(read);
		
//		while ((read = br.readLine()) != null) {
//			list.add(Integer.parseInt(read));
//		}

//		baekjoon11729(n, 1, 3, 2);
		as(n, 1, 3, 2,sb);
		System.out.print(sb.toString());

	}
//	---------------------------------------------------------------------------------
	
//	하노이 탑 이동 순서
    public static void as(int n, int f, int t, int s, StringBuilder sb) {
        if (n != 1) {
            // n-1개의 원반을 보조 기둥으로 옮기기
            as(n - 1, f, s, t, sb);

            // 가장 큰 원반을 목적지 기둥으로 옮기기
            sb.append(f).append(" ").append(t).append("\n");

            // 보조 기둥에서 목적지 기둥으로 원반 옮기기
            as(n - 1, s, t, f, sb);
        } else {
            // 가장 작은 원반을 옮기기
            sb.append(f).append(" ").append(t).append("\n");
        }
    }
	public static void baekjoon11729(int n,int f, int t, int s) {
		if (n != 1) {
			baekjoon11729(n-1, f, s, t);
			System.out.printf("%d %d\n",f,t);
			baekjoon11729(n-1, s, t, f);
			
		}
		else{
			System.out.printf("%d %d\n",f,t);
			return;
		}
	}
	
	
//	별 찍기 - 10
	public static char[][] baekjoon2447(int n) {
		if (n==3) return  new char[][]{{'*','*','*'},
										{'*',' ','*'},
										{'*','*','*'}};
											
        char[][] smaller = baekjoon2447(n / 3);
//        int size = n; 
        char[][] arr = new char[n][n];

//        for (int i = 0; i < n; i++) {
//            for (int j = 0; j < n; j++) {
//                if ((i / (n / 3)) % 3 == 1 && (j / (n / 3)) % 3 == 1) {
//                    arr[i][j] = ' '; 
//                } else {
//                    arr[i][j] = smaller[i % (n / 3)][j % (n / 3)];
//                }
//            }
//        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if ((i / (n / 3)) % 3 != 1 || (j / (n / 3)) % 3 != 1) {
                	arr[i][j] = smaller[i % (n / 3)][j % (n / 3)];
                } else {
                	arr[i][j] = ' '; 
                }
            }
        }

        return arr;
    }
	public static char[][] baekjoon2447A(int n) {
		if (n==1) return  new char[][]{{'*'}};
		
		int m = n / 3;
		char[][] arr = baekjoon2447(m);
		int len = arr.length * 3;
		char[][] arr3 = new char[len][len];
		
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				for (int x = 0; x < arr.length; x++) {
					for (int y = 0; y < arr[x].length; y++) {
						if(i==1 &&j==1);
						else {
							arr3[i*m+x][j*m+y] = arr[x][y];
						}
					}
				}
			}
		}
		return arr3;
		
	}

	public static void fillArray(char[][] arr,char c) {
		for (int i = 0; i < arr.length; i++) {
            Arrays.fill(arr[i], c);  
        }
	}
	
	
//	칸토어 집합
	public static StringBuilder baekjoon4779(int n,StringBuilder str) {
		if (n > 0) {
			String s = str.toString();
			for (int i = 0; i < s.length(); i++) {
				str.append(" ");
			}
			str.append(s);
			n--;
			baekjoon4779(n, str);
		}
		return str;
	}
	public static StringBuffer baekjoon4779(int n,StringBuffer str) {
		if (n > 0) {
			String s = str.toString();
			for (int i = 0; i < s.length(); i++) {
				str.append(" ");
			}
			str.append(s);
			n--;
			baekjoon4779(n, str);
		}
		return str;
	}
	public static StringBuffer baekjoon4779(StringBuffer str) {
		int num = str.length() / 3;
		
		str.delete(num, num*2);
		for (int i = 0; i < num; i++) {
			str.insert(num, " ");
		}
		
//		System.out.println(str);
		if (num == 1) {
			return str;
		}else {
			StringBuffer str1 = new StringBuffer(str.toString().substring(0, num));
			String s = baekjoon4779(str1).toString();
			
			str.replace(0, num, s);
			str.replace(num*2, str.length(), s);
			
			return str;
			}
	}
	
//	병합 정렬 1
    public static void baekjoon24060() {
    	
	}
	
//	재귀의 귀재
	public static void recursion(String s, int l, int r, int c){
        if(l >= r) {
        	System.out.printf("%d %d\n",1,c);
        	return ;
        }
        else if(s.charAt(l) != s.charAt(r)) {
        	System.out.printf("%d %d\n",0,c);
        	return ;
        }
        else {
        	recursion(s, l+1, r-1,c+1);
        	return;
        }
    }
    public static void isPalindrome(String s){
    	recursion(s, 0, s.length()-1,1);
        return;
    }
//	피보나치수5
    public static int baekjoon10870(int n) {
    	if (n==0) return 0;
    	else if(n==1) return 1;
    	else return Main.baekjoon10870(n-1)+Main.baekjoon10870(n-2);
	}
//	팩토리얼2
    public static void baekjoon27433(int n, int answer) {
    	if (n <= 1) {
    		System.out.println(answer);
    		return;
    	}else {
    		answer = answer * n;
    		n--;
    		baekjoon27433(n, answer);
    	}
    	return;
    }
//    2차원배열 출력
    public static void printArray2(int[][] arr) {
    	for (int i = 0; i < arr.length; i++) {
    		for (int j = 0; j < arr[0].length; j++) {
    			System.out.print(arr[i][j] + " ");
    		}
    		System.out.println();
    	}
    	System.out.println();
    }
    public static void printArray2(char[][] arr) {
    	for (int i = 0; i < arr.length; i++) {
    		for (int j = 0; j < arr[0].length; j++) {
    			System.out.print(arr[i][j] + " ");
    		}
    		System.out.println();
    	}
    	System.out.println();
    }


}
